Read Me file for Genetic Algorithm code.

Pesudo Code:
-Creates a random population of size N
-Individuals in the population are arrays [x,x,x,x,x]
-Each variable is a parameters used for one of the steps in the sequence (i.e the pit params)
-We calculate how good each individual is by the fitness function (looking at how good the echo is)
-We then randomly select (with a weighted distribution based on the fitness) a percentage of the population to become the parents.
-We crossover (with a crossover rate) the parents by randomly switching some of the variables with each other this becomes the new population
If they do not crossover they get copied directly into the new population
-This repeats until the new population fills up to its original size N
-We now mutate (with a mutation rate. Only a certain percentage will mutate) every variable within a specific mutation range
-This our new population generation 2 we repeat this process untill we reach a certain number of generations or a specific fitness.


How to use:

To implement it into a specific part of the sequence or (wanting to optimise pit, afc, etc)
simplified General layout:

define the parameters for the GA (population size, mutation rate, crossover rate, etc)

initial_population = array of randomise parameters  #The initial random population

for j in range(num_generations):      # Loop for number of generations 
    for i in range(population_size):  # Loop to go through each individual
        Run code for pop[i] # Implement code you want to run using the GA params
        Save data           # Store the echo data
        fitness = fitness_function # Use the saved data to calculate fitness
    
    parents = select_function       # After loop i select parents
    population = crossover_function # Crossover
    population = mutate_function    # mutate 

    # Loop back to next generation



HOW TO USE:
# Define the GA parameters how GA will preform NOTE: DO NOT CHANGE VARIABLE NAMES
GA_params = { 'population_size': 1,
             'num_parents': 1,
             'num_generations': 1,
             'crossover_rate': 0.8,
             'mutation_rate': 0.9,
             'mutation_range': 0.1}

# Make your sequence you want to run add bounds (x,y) for the range you want and a single value if you want it constant (NOTE: amplitude max 0.21) this is sequence_params 
sequence_bounds = dict(
    bounds_pit = {'no_pulses': (1, 1001),
                 'f_0': 250E6,
                'amplitude': (0.001, 0.21),
                'f_sweep': 12E6/4,
                'duration': (10E-6, 100E-6),
                'delay': (10E-6, 300E-6),
                'phase': 0},

    bounds_burn_back = {'no_pulses': (1, 1001),
                'f_0': (10E5, 500E6),
                'amplitude': (0.001, 0.21),
                'freq_sweep': (0.1E-6, 5E6),
                'duration': (10E-6, 100E-6),
                'delay': (10E-6, 300E-6),
                'phase': 0},

    bounds_clean = {'no_pulses': (1, 1001),
                'f_0': (10E5, 500E6),
                'amplitude': (0.001, 0.21),
                'freq_sweep': (0.1E-6, 5E6),
                'duration': (10E-6, 100E-6),
                'delay': (10E-6, 300E-6),
                'phase': 0}
)

# Generates initial population
sequence_params = initial_population_function

for j in range(GA_params[num_generations]):      # Loop for number of generations 
    for i in range(GA_params[population_size]):  # Loop to go through each individual

        # compile and upload to HDAWG
        # Run HDAWG Sequence
        Run code for sequence_params[i] # Run code 

        Save data           # Store the echo data

        fitness = fitness_function # Use the saved data to calculate fitness
    
    parents = parentselect_function       # After loop i select parents
    population = crossover_function # Crossover
    population = mutate_function    # mutate 
